#!/usr/bin/env ruby
# frozen_string_literal: true

require 'json'
require 'rest-client'

def forgeapi
  'https://forgeapi.puppet.com/v3'
end

def module_info(module_name)
  return @cached_info[module_name] unless @cached_info.nil? || @cached_info[module_name].nil?

  @cached_info = {} if @cached_info.nil?

  response = RestClient.get "#{forgeapi}/modules/#{module_name}"
  info = JSON.parse response.body

  unless info['superseded_by'].nil?
    warn "  => Superseded by #{info['superseded_by']['slug']}"
    info = module_info(info['superseded_by']['slug'])
  end

  @cached_info[module_name] = info
rescue => e
  warn e.message
  nil
end

def nextmajor(current_version)
  # This is a hack.  I tried to use
  # Gem::Version.new(current_version).canonical_segments,
  # but it did not work reliably.
  newver = current_version.split('.').map { |n| n.to_i }
  newver[0] += 1
  newver[1..].each_index do |n|
    newver[n + 1] = 0
  end
  newver.join('.')
end

def process_dependency(dep)
  return unless dep.key?('name')

  warn "Checking #{dep['name']} #{dep['version_requirement']}"

  slug = dep['name'].tr('/', '-')

  info = module_info(slug)
  return if info.nil?

  module_name = info['slug']
  current_version = info['current_release']['version']

  if module_name != slug
    warn "  => Replaced with #{module_name} version #{current_version}"
    dep['name'] = module_name
  end

  return unless dep.key?('version_requirement')

  bounds = dep['version_requirement'].split(%r{\s+(?=[<>=~])}, 2)
  return if Gem::Requirement.new(bounds).satisfied_by?(Gem::Version.new(current_version))

  warn "  => #{module_name} #{current_version} out of range"
  unless bounds.length == 2
    warn '  -> Skipping update!'
    return
  end

  # Try bumping the upper bounds
  bounds[1] = "< #{nextmajor(current_version)}"
  if Gem::Requirement.new(bounds).satisfied_by?(Gem::Version.new(current_version))
    version_requirement = bounds.join(' ')
    warn "  -> Updating to #{version_requirement}"
    dep['version_requirement'] = version_requirement
  else
    warn "  -> Unable to find a matching range! (Tried #{bounds}.)"
  end
end

orig_metadata = JSON.parse(File.read('metadata.json'))

metadata = Marshal.load(Marshal.dump(orig_metadata))

metadata['dependencies']&.each do |dep|
  process_dependency(dep)
end

metadata.dig('simp', 'optional_dependencies')&.each do |dep|
  process_dependency(dep)
end

unless metadata == orig_metadata
  File.open('metadata.json', 'w') do |fh|
    fh.puts JSON.pretty_generate(metadata)
  end
end
